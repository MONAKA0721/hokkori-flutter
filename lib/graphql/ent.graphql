directive @goField(
  forceResolver: Boolean
  name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Category implements Node {
  id: ID!
  name: String!
  post: [Post!]
  draft: [Draft!]
}
"""
A connection to a list of items.
"""
type CategoryConnection {
  """
  A list of edges.
  """
  edges: [CategoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CategoryEdge {
  """
  The item at the end of the edge.
  """
  node: Category
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CategoryWhereInput is used for filtering Category objects.
Input was generated by ent.
"""
input CategoryWhereInput {
  not: CategoryWhereInput
  and: [CategoryWhereInput!]
  or: [CategoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  post edge predicates
  """
  hasPost: Boolean
  hasPostWith: [PostWhereInput!]
  """
  draft edge predicates
  """
  hasDraft: Boolean
  hasDraftWith: [DraftWhereInput!]
}
"""
CreateDraftInput is used for create Draft object.
Input was generated by ent.
"""
input CreateDraftInput {
  createTime: Time
  updateTime: Time
  praiseTitle: String!
  letterTitle: String!
  praiseContent: String!
  letterContent: String!
  praiseSpoiled: Boolean!
  letterSpoiled: Boolean!
  ownerID: ID!
  hashtagIDs: [ID!]
  workID: ID
  categoryID: ID
}
"""
CreateHashtagInput is used for create Hashtag object.
Input was generated by ent.
"""
input CreateHashtagInput {
  title: String!
  postIDs: [ID!]
  draftIDs: [ID!]
}
"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  createTime: Time
  updateTime: Time
  title: String!
  content: String!
  type: PostPostType!
  spoiled: Boolean!
  thumbnail: String
  ownerID: ID!
  hashtagIDs: [ID!]
  workID: ID!
  categoryID: ID!
  likedUserIDs: [ID!]
  bookmarkedUserIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String!
  username: String
  profile: String
  avatarURL: String
  """
  1:10代 2:20代 3:30代 4:40代 5:50代 6:60代以上
  """
  age: Int
  """
  1:男 2:女 3:選択しない
  """
  gender: Int
  """
  1:ポケットモンスター 2:どうぶつの森 3:スーパーマリオ 4:スプラトゥーン 5:ゼルダの伝説 6:モンスターハンター 7:ドラゴンクエスト 8:ファイナルファンタジー 9:ニーア 10:桃太郎電鉄 11:パワプロ 12:メタルギア 13:マインクラフト 14:ソニック
  """
  interests: [Int!]
  postIDs: [ID!]
  likedPostIDs: [ID!]
  bookmarkedPostIDs: [ID!]
  followerIDs: [ID!]
  followingIDs: [ID!]
  draftIDs: [ID!]
}
"""
CreateWorkInput is used for create Work object.
Input was generated by ent.
"""
input CreateWorkInput {
  title: String!
  thumbnail: String
  postIDs: [ID!]
  draftIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Draft implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  praiseTitle: String!
  letterTitle: String!
  praiseContent: String!
  letterContent: String!
  praiseSpoiled: Boolean!
  letterSpoiled: Boolean!
  owner: User!
  hashtags: [Hashtag!]
  work: Work
  category: Category
}
"""
A connection to a list of items.
"""
type DraftConnection {
  """
  A list of edges.
  """
  edges: [DraftEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DraftEdge {
  """
  The item at the end of the edge.
  """
  node: Draft
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Draft connections
"""
input DraftOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Drafts.
  """
  field: DraftOrderField!
}
"""
Properties by which Draft connections can be ordered.
"""
enum DraftOrderField {
  CREATE_TIME
  UPDATE_TIME
}
"""
DraftWhereInput is used for filtering Draft objects.
Input was generated by ent.
"""
input DraftWhereInput {
  not: DraftWhereInput
  and: [DraftWhereInput!]
  or: [DraftWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  praise_title field predicates
  """
  praiseTitle: String
  praiseTitleNEQ: String
  praiseTitleIn: [String!]
  praiseTitleNotIn: [String!]
  praiseTitleGT: String
  praiseTitleGTE: String
  praiseTitleLT: String
  praiseTitleLTE: String
  praiseTitleContains: String
  praiseTitleHasPrefix: String
  praiseTitleHasSuffix: String
  praiseTitleEqualFold: String
  praiseTitleContainsFold: String
  """
  letter_title field predicates
  """
  letterTitle: String
  letterTitleNEQ: String
  letterTitleIn: [String!]
  letterTitleNotIn: [String!]
  letterTitleGT: String
  letterTitleGTE: String
  letterTitleLT: String
  letterTitleLTE: String
  letterTitleContains: String
  letterTitleHasPrefix: String
  letterTitleHasSuffix: String
  letterTitleEqualFold: String
  letterTitleContainsFold: String
  """
  praise_content field predicates
  """
  praiseContent: String
  praiseContentNEQ: String
  praiseContentIn: [String!]
  praiseContentNotIn: [String!]
  praiseContentGT: String
  praiseContentGTE: String
  praiseContentLT: String
  praiseContentLTE: String
  praiseContentContains: String
  praiseContentHasPrefix: String
  praiseContentHasSuffix: String
  praiseContentEqualFold: String
  praiseContentContainsFold: String
  """
  letter_content field predicates
  """
  letterContent: String
  letterContentNEQ: String
  letterContentIn: [String!]
  letterContentNotIn: [String!]
  letterContentGT: String
  letterContentGTE: String
  letterContentLT: String
  letterContentLTE: String
  letterContentContains: String
  letterContentHasPrefix: String
  letterContentHasSuffix: String
  letterContentEqualFold: String
  letterContentContainsFold: String
  """
  praise_spoiled field predicates
  """
  praiseSpoiled: Boolean
  praiseSpoiledNEQ: Boolean
  """
  letter_spoiled field predicates
  """
  letterSpoiled: Boolean
  letterSpoiledNEQ: Boolean
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """
  hashtags edge predicates
  """
  hasHashtags: Boolean
  hasHashtagsWith: [HashtagWhereInput!]
  """
  work edge predicates
  """
  hasWork: Boolean
  hasWorkWith: [WorkWhereInput!]
  """
  category edge predicates
  """
  hasCategory: Boolean
  hasCategoryWith: [CategoryWhereInput!]
}
type Hashtag implements Node {
  id: ID!
  title: String!
  posts: [Post!]
  drafts: [Draft!]
}
"""
A connection to a list of items.
"""
type HashtagConnection {
  """
  A list of edges.
  """
  edges: [HashtagEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type HashtagEdge {
  """
  The item at the end of the edge.
  """
  node: Hashtag
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
HashtagWhereInput is used for filtering Hashtag objects.
Input was generated by ent.
"""
input HashtagWhereInput {
  not: HashtagWhereInput
  and: [HashtagWhereInput!]
  or: [HashtagWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """
  drafts edge predicates
  """
  hasDrafts: Boolean
  hasDraftsWith: [DraftWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/MONAKA0721/hokkori/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Post implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  title: String!
  content: String!
  type: PostPostType!
  spoiled: Boolean!
  thumbnail: String
  owner: User!
  hashtags: [Hashtag!]
  work: Work!
  category: Category!
  likedUsers: [User!]
  bookmarkedUsers: [User!]
}
"""
A connection to a list of items.
"""
type PostConnection {
  """
  A list of edges.
  """
  edges: [PostEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Post connections
"""
input PostOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Posts.
  """
  field: PostOrderField!
}
"""
Properties by which Post connections can be ordered.
"""
enum PostOrderField {
  CREATE_TIME
  UPDATE_TIME
}
"""
PostPostType is enum for the field type
"""
enum PostPostType
  @goModel(model: "github.com/MONAKA0721/hokkori/ent/post.Type") {
  letter
  praise
}
"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  not: PostWhereInput
  and: [PostWhereInput!]
  or: [PostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """
  type field predicates
  """
  type: PostPostType
  typeNEQ: PostPostType
  typeIn: [PostPostType!]
  typeNotIn: [PostPostType!]
  """
  spoiled field predicates
  """
  spoiled: Boolean
  spoiledNEQ: Boolean
  """
  thumbnail field predicates
  """
  thumbnail: String
  thumbnailNEQ: String
  thumbnailIn: [String!]
  thumbnailNotIn: [String!]
  thumbnailGT: String
  thumbnailGTE: String
  thumbnailLT: String
  thumbnailLTE: String
  thumbnailContains: String
  thumbnailHasPrefix: String
  thumbnailHasSuffix: String
  thumbnailIsNil: Boolean
  thumbnailNotNil: Boolean
  thumbnailEqualFold: String
  thumbnailContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """
  hashtags edge predicates
  """
  hasHashtags: Boolean
  hasHashtagsWith: [HashtagWhereInput!]
  """
  work edge predicates
  """
  hasWork: Boolean
  hasWorkWith: [WorkWhereInput!]
  """
  category edge predicates
  """
  hasCategory: Boolean
  hasCategoryWith: [CategoryWhereInput!]
  """
  liked_users edge predicates
  """
  hasLikedUsers: Boolean
  hasLikedUsersWith: [UserWhereInput!]
  """
  bookmarked_users edge predicates
  """
  hasBookmarkedUsers: Boolean
  hasBookmarkedUsersWith: [UserWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  categories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Categories returned from the connection.
    """
    where: CategoryWhereInput
  ): CategoryConnection!
  drafts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Drafts returned from the connection.
    """
    orderBy: DraftOrder

    """
    Filtering options for Drafts returned from the connection.
    """
    where: DraftWhereInput
  ): DraftConnection!
  hashtags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Hashtags returned from the connection.
    """
    where: HashtagWhereInput
  ): HashtagConnection!
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Posts returned from the connection.
    """
    orderBy: PostOrder

    """
    Filtering options for Posts returned from the connection.
    """
    where: PostWhereInput
  ): PostConnection!
  works(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Works returned from the connection.
    """
    where: WorkWhereInput
  ): WorkConnection!
  likedPosts(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    where: PostWhereInput
  ): PostConnection!
  topicWorks(first: Int!): [Work]!
  workCategories(workID: ID!): [WorkCategory]!
}
"""
UpdateDraftInput is used for update Draft object.
Input was generated by ent.
"""
input UpdateDraftInput {
  updateTime: Time
  praiseTitle: String
  letterTitle: String
  praiseContent: String
  letterContent: String
  praiseSpoiled: Boolean
  letterSpoiled: Boolean
  clearOwner: Boolean
  ownerID: ID
  addHashtagIDs: [ID!]
  removeHashtagIDs: [ID!]
  clearWork: Boolean
  workID: ID
  clearCategory: Boolean
  categoryID: ID
}
"""
UpdateHashtagInput is used for update Hashtag object.
Input was generated by ent.
"""
input UpdateHashtagInput {
  title: String
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  addDraftIDs: [ID!]
  removeDraftIDs: [ID!]
}
"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  updateTime: Time
  title: String
  content: String
  type: PostPostType
  spoiled: Boolean
  clearThumbnail: Boolean
  thumbnail: String
  clearOwner: Boolean
  ownerID: ID
  addHashtagIDs: [ID!]
  removeHashtagIDs: [ID!]
  clearWork: Boolean
  workID: ID
  clearCategory: Boolean
  categoryID: ID
  addLikedUserIDs: [ID!]
  removeLikedUserIDs: [ID!]
  addBookmarkedUserIDs: [ID!]
  removeBookmarkedUserIDs: [ID!]
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  clearUsername: Boolean
  username: String
  clearProfile: Boolean
  profile: String
  clearAvatarURL: Boolean
  avatarURL: String
  clearAge: Boolean
  """
  1:10代 2:20代 3:30代 4:40代 5:50代 6:60代以上
  """
  age: Int
  clearGender: Boolean
  """
  1:男 2:女 3:選択しない
  """
  gender: Int
  clearInterests: Boolean
  """
  1:ポケットモンスター 2:どうぶつの森 3:スーパーマリオ 4:スプラトゥーン 5:ゼルダの伝説 6:モンスターハンター 7:ドラゴンクエスト 8:ファイナルファンタジー 9:ニーア 10:桃太郎電鉄 11:パワプロ 12:メタルギア 13:マインクラフト 14:ソニック
  """
  interests: [Int!]
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  addLikedPostIDs: [ID!]
  removeLikedPostIDs: [ID!]
  addBookmarkedPostIDs: [ID!]
  removeBookmarkedPostIDs: [ID!]
  addFollowerIDs: [ID!]
  removeFollowerIDs: [ID!]
  addFollowingIDs: [ID!]
  removeFollowingIDs: [ID!]
  addDraftIDs: [ID!]
  removeDraftIDs: [ID!]
}
"""
UpdateWorkInput is used for update Work object.
Input was generated by ent.
"""
input UpdateWorkInput {
  title: String
  clearThumbnail: Boolean
  thumbnail: String
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  addDraftIDs: [ID!]
  removeDraftIDs: [ID!]
}
type User implements Node {
  id: ID!
  name: String!
  username: String
  profile: String
  avatarURL: String
  """
  1:10代 2:20代 3:30代 4:40代 5:50代 6:60代以上
  """
  age: Int
  """
  1:男 2:女 3:選択しない
  """
  gender: Int
  """
  1:ポケットモンスター 2:どうぶつの森 3:スーパーマリオ 4:スプラトゥーン 5:ゼルダの伝説 6:モンスターハンター 7:ドラゴンクエスト 8:ファイナルファンタジー 9:ニーア 10:桃太郎電鉄 11:パワプロ 12:メタルギア 13:マインクラフト 14:ソニック
  """
  interests: [Int!]
  posts: [Post!]
  likedPosts: [Post!]
  bookmarkedPosts: [Post!]
  followers: [User!]
  following: [User!]
  drafts: [Draft!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameIsNil: Boolean
  usernameNotNil: Boolean
  usernameEqualFold: String
  usernameContainsFold: String
  """
  profile field predicates
  """
  profile: String
  profileNEQ: String
  profileIn: [String!]
  profileNotIn: [String!]
  profileGT: String
  profileGTE: String
  profileLT: String
  profileLTE: String
  profileContains: String
  profileHasPrefix: String
  profileHasSuffix: String
  profileIsNil: Boolean
  profileNotNil: Boolean
  profileEqualFold: String
  profileContainsFold: String
  """
  avatar_url field predicates
  """
  avatarURL: String
  avatarURLNEQ: String
  avatarURLIn: [String!]
  avatarURLNotIn: [String!]
  avatarURLGT: String
  avatarURLGTE: String
  avatarURLLT: String
  avatarURLLTE: String
  avatarURLContains: String
  avatarURLHasPrefix: String
  avatarURLHasSuffix: String
  avatarURLIsNil: Boolean
  avatarURLNotNil: Boolean
  avatarURLEqualFold: String
  avatarURLContainsFold: String
  """
  age field predicates
  """
  age: Int
  ageNEQ: Int
  ageIn: [Int!]
  ageNotIn: [Int!]
  ageGT: Int
  ageGTE: Int
  ageLT: Int
  ageLTE: Int
  ageIsNil: Boolean
  ageNotNil: Boolean
  """
  gender field predicates
  """
  gender: Int
  genderNEQ: Int
  genderIn: [Int!]
  genderNotIn: [Int!]
  genderGT: Int
  genderGTE: Int
  genderLT: Int
  genderLTE: Int
  genderIsNil: Boolean
  genderNotNil: Boolean
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """
  liked_posts edge predicates
  """
  hasLikedPosts: Boolean
  hasLikedPostsWith: [PostWhereInput!]
  """
  bookmarked_posts edge predicates
  """
  hasBookmarkedPosts: Boolean
  hasBookmarkedPostsWith: [PostWhereInput!]
  """
  followers edge predicates
  """
  hasFollowers: Boolean
  hasFollowersWith: [UserWhereInput!]
  """
  following edge predicates
  """
  hasFollowing: Boolean
  hasFollowingWith: [UserWhereInput!]
  """
  drafts edge predicates
  """
  hasDrafts: Boolean
  hasDraftsWith: [DraftWhereInput!]
}
type Work implements Node {
  id: ID!
  title: String!
  thumbnail: String
  posts: [Post!]
  drafts: [Draft!]
}
"""
A connection to a list of items.
"""
type WorkConnection {
  """
  A list of edges.
  """
  edges: [WorkEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type WorkEdge {
  """
  The item at the end of the edge.
  """
  node: Work
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
WorkWhereInput is used for filtering Work objects.
Input was generated by ent.
"""
input WorkWhereInput {
  not: WorkWhereInput
  and: [WorkWhereInput!]
  or: [WorkWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  thumbnail field predicates
  """
  thumbnail: String
  thumbnailNEQ: String
  thumbnailIn: [String!]
  thumbnailNotIn: [String!]
  thumbnailGT: String
  thumbnailGTE: String
  thumbnailLT: String
  thumbnailLTE: String
  thumbnailContains: String
  thumbnailHasPrefix: String
  thumbnailHasSuffix: String
  thumbnailIsNil: Boolean
  thumbnailNotNil: Boolean
  thumbnailEqualFold: String
  thumbnailContainsFold: String
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """
  drafts edge predicates
  """
  hasDrafts: Boolean
  hasDraftsWith: [DraftWhereInput!]
}
